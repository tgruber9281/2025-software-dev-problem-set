Java solution using a HashSet

class Solution {
    public boolean containsDuplicate(int[] nums) {
                Set<Integer> numsSet = new HashSet<>();
                for (int num : nums) {
                    if (numsSet.add(num)){
                        numsSet.add(num);
                    } else {
                        return true;
                    }
                }
                return false;
            }
}


***********************************************************************


Java solution after several days of not having done the problem

class Solution {
            
            private int[] nums = {1,2,3,1};
            
            public boolean containsDuplicate(int[] nums) {
                Arrays.sort(nums);
                for (int i = 0; i < nums.length-1; i++) {
                    if (nums[i] == nums[i+1]) {
                        return true;
                    }
                }
                return false;
            }
        }

***********************************************************************


JavaScript Solution

/**
 * @param {number[]} nums
 * @return {boolean}
 */

var containsDuplicate = function(nums) {
    for (i = 0; i < nums.length; i++) {
      let numfilter = nums.slice(i+1);

      console.log(numfilter);
      if (numfilter.includes(nums[i])){
        return true;
      }
    };
    return false;
};
